// CYD-UI Grammar test
#[grammar: component] {
  tokens {
    COMP_BEGIN = /\|>/
    COMP_END = /<\|/
    PIPE = /\|/
    EQ = /=/
    LB = /\{/
    RB = /\}/
    ID = /[a-zA-Z_]+[a-zA-Z0-9\-_]*/
    STATE_KW = /state/
    _WS = / /
    _NL = /\n/
  }
  rules {
    prop = PIPE ID EQ ID <.$2 = $4,>;
    props_list = prop { props_list } <$1
      $2>;
    props_spec = props_list <.props = {
      $1},>;

    component_spec = COMP_BEGIN ID props_spec component_spec COMP_END <
      COMP($2)({
        $3
        .inner = {
          $4
        },
      }),
    >              | COMP_BEGIN ID props_spec COMP_END <
      COMP($2)({
        $3
      }),
    >;
    inner_list = component_spec { inner_list } <
      $1
      $2
    >;

    state_spec = STATE_KW LB RB <
      STATE($[]) {
        INIT_STATE($[]) {
          ...
        }
      }
    >;
    component = ID state_spec inner_list <
      $2[$1,$1]
      COMPONENT($1) {
        PROPS({})
        INIT($1) { ENABLE_LOG }
        REDRAW {
          $3
        }
      }
    >;

    root = component;
  }
}

[component|> SomeComponent
  state {
  }
  |>VBox
    | spacing = some_var1
    | w = some_var2
    |>OtherComponent
      | color = some_clr
    <|
  <|
]


