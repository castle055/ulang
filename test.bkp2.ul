// CYD-UI Grammar test
#[grammar: cyd-ui-core] {
    tokens {
        COMP_BEGIN = /\|>/
        COMP_END = /<\|/
        PIPE = /\|/
        EQ = /=/
        LB = /\{/
        RB = /\}/
        ID = /[a-zA-Z_]+[a-zA-Z0-9\-_]*/
        STATE_KW = /state/
        _WS = / /
        _NL = /\n/
    }
    rules {
        prop = PIPE ID EQ ID <.$2 = $4,>;
        props_list = prop { props_list } <$1\n$2>;
        props_spec = props_list <.props = {\n%i+$1%i-\n},>;

        component_spec = COMP_BEGIN ID props_spec component_spec COMP_END <COMP($2)({\n%i+$3\n.inner = {%i-\n%i+%i+$4%i-\n},%i-\n}),>
                       | COMP_BEGIN ID props_spec COMP_END <COMP($2)({\n%i+$3%i-\n}),>;
        inner_list = component_spec { inner_list } <$1\n$2>;

        state_spec = STATE_KW LB RB <STATE($[1]) {%i+\nINIT_STATE($[1]) {%i+\n...%i-\n}%i-\n}>;
        component = ID state_spec inner_list <$2[$1]\nCOMPONENT($1) {%i+\nPROPS({})\nINIT($1) {%i+\nENABLE_LOG%i-\n}\n\nREDRAW {%i-\n%i+%i+$3%i-\n}%i-\n}>;

        root; // Should be able to inhibit using this grammar
    }
}

#[grammar: what-if-function] {
  tokens {
    ID = /[a-zA-Z_]+[a-zA-Z0-9\-_]*/
    _WS = / /
    _NL = /\n/
  }
  rules {
    root = ID ID ID <${(do-something $1 $2 $3)}>;
  }
}

[what-if-function|> some argument yo]

[eval|>
  (defun whatever (arg1) ())
]

#[grammar: component]: cyd-ui-core {
    tokens { }
    rules {
        ^ root = component;

        // TESTS - FIXME -- REMOVE BEFORE FLIGHT
        some_rule = ID <$1>;
        some_rule = ID <$1{...}>; (str)->str
        some_rule = ID <$1[...]>;
        some_rule = ID <$1[...]{...}>; (str)->str
        some_rule = ID <${...}>; ()->str
        some_rule = ID <$[]>;
        some_rule = ID <$[]{...}>; (str)->str
    }
}

[component|> SomeComponent
  state {
  }
  |>VBox
    | spacing = some_var1
    | w = some_var2
    |>OtherComponent
      | color = some_clr
    <|
  <|
]


